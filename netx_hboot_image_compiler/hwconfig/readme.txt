The HWConfig Tool translates a hardware configuration XML file generated 
by netX Studio into a HBoot XML file, which can then be compiled to a 
HBoot image using the HBoot image compiler.

Requires Python 3.7

Enter "python hwconfig.py -h" to list the subcommands.
Enter "python hwconfig.py <subcommand> -h" for help about a subcommand.

hwconfig make_hboot_xml [-h] -p FILE [-v LEVEL] FILE FILE
    Generate a HBoot XML file from a hardware configuration.

hwconfig list_static_cfg [-h] CHIP_TYPE
    List the static XML files for the hardware config GUI in netx studio.

hwconfig list_dynamic_cfg [-h] CHIP_TYPE PATH
    List the dynamic XML files for the hardware config GUI in netx studio.

hwconfig [options] list_supported_chips [-h]
    List the static XML files used to compile hardware configs.

Examples:
python hwconfig.py make_hboot_xml -p netx90_mpw_peripherals.xml hw_config.xml hboot_image.xml 
python hwconfig.py list_static_cfg netx90
python hwconfig.py list_dynamic_cfg netx90 d:\configs
python hwconfig.py list_supported_chips 


Notes to netx90 hwconfig tool v3.0.10
============================================
Limited support for W25Q32JV: 
When the W25Q32JV is selected, the boot image must not contain any NEXT chunks that jump to SQI flash.


Notes to netx90 Rev1 hwconfig tool v3.0.7
============================================
* Minimum version of HBoot image compiler required: 0.0.10

This version can generate boot images for the netx90 and the netx90_Rev. 1.
The HWConfig tool distinguishes between netx 90 and netx 90 Rev. 1 by the file names of the XML files passed on the command line.
netx90.xml, netx90_peripherals.xml - The only difference is the chip type info in the first line of the file.
netx90_Rev1.xml, netx90_Rev1_peripherals.xml (new) - The Rev1 file contains a few adaptions to the new ROM code.

The new DPM config structure has a different option structure for the IDPM. This is currently not generated by the HWConfig tool. 
(The register values would be at reset values anyway).

Overlays:
In the overlays directory, we have an SDRAM configuration, sdram_16_bit-IS45S16400J-7BLA2-NXHX-SDRSPM_R1.xml.
Since the netx90 Rev.1 requires different SDRAM parameters, I've created a variant of the file, sdram_16_bit-IS45S16400J-7BLA2-NXHX-SDRSPM_R1_netx90_Rev1.xml.


Testing:

We can build the test configurations for both the netx90 and netx90_Rev1 (using the make_hboot_netx90B.bat scripts).
We can also execute them on netx90_Rev1 hardware and verify the register settings.
The register settings pass, except for the test configurations involving an SPM, 
which differ in the valus of dpm_tunnel_cfg, dpm_itbaddr and the DPM window settings.


Notes to netx90 (Full) hwconfig tool v3.0.6

============================================

* Minimum version of HBoot image compiler required: 0.0.9



Notes to netx90 (Full) hwconfig tool v3.0.1
============================================

* Changed the order of steps in the hardware configuration: pad control values 
  are set after configuring SDRAM, DPM etc..

* Removed the existing SDRAM overlays, add overlay for IS45S16400J-7BLA2 (8MByte ISSI) on NXHX-SDRSPM R1.

* Disable peripherals sqi0_b and MPWM in netx Studio GUI.


Notes to netx90 (Full) hwconfig tool v3.0.0
============================================

Preliminary version, untested.
Support for netx 90 MPW has been dropped.


Notes to netx90 MPW hwconfig tool v2.0.1
=========================================


The boot image is now constructed of the following parts:
* disable_redundancy_pages v1.0.0
* HW config data, apply HW Config binary v1.1.0
* HIF DPM settings, setup_dpm v1.1.7
* Hand-over parameters
* Optional: Start App CPU


MLED configuration on netX 90
===============================

If the peripherals 'phy0' or 'phy0_phy1' are enabled, the MLED source signals are configured according to the LED assignments on the NXHX90-JTAG board.
The hardware config assigns the following signals to the MLED pins:

Peripheral  MLED Register   MLED Pin        Signal
---------------------------------------------------------------------------------
Phy0_Phy1   0               0 hi            20 = blink[1]           COM0 red
            1               0 lo            19 = blink[0]           COM0 green
            2               1 hi            22 = blink[3]           COM1 red
            3               1 lo            21 = blink[2]           COM1 green

Phy0        4               2 hi            16 = phy_ctrl0_led[1]   Ch0 Act
            5               2 lo            15 = phy_ctrl0_led[0]   Ch0 Link

Phy1        6               3 hi            18 = phy_ctrl1_led[1]   Ch1 Act
            7               3 lo            17 = phy_ctrl0_led[0]   Ch1 Link

The settings in mled_ctrl_cfg are left at their reset values. The MLED unit is not enabled.




Readme to v0.0.5
================

phy0, phy0_phy1
================

The LED_LINK_IN pins are input-only and don't have the drive_strength field.
The following entries in hardware_config.xml must be changed:

    <pin id="PHY0_LED_LINK_IN" drive_strength="low" pull_enable="true"/>
to
    <pin id="PHY0_LED_LINK_IN"                      pull_enable="true"/>


    <pin id="PHY1_LED_LINK_IN" drive_strength="low" pull_enable="true"/>
to
    <pin id="PHY1_LED_LINK_IN"                      pull_enable="true"/>

The RX/TX pins do not have pad control registers.
The following entries must be removed:
<pad_config>
...
    <pin id="PHY0_RXN"/>
    <pin id="PHY0_RXP"/>
    <pin id="PHY0_TXN"/>
    <pin id="PHY0_TXP"/>
...
    <pin id="PHY1_RXN"/>
    <pin id="PHY1_RXP"/>
    <pin id="PHY1_TXN"/>
    <pin id="PHY1_TXP"/>
</pad_config>



XM0
====
Pin MII0_RXD0 is input-only and the pad_ctrl register does not have the drive_strenth field.

        <pin id="MII0_RXD0" drive_strength="low" pull_enable="true"/>
must be changed to
        <pin id="MII0_RXD0"                      pull_enable="true"/>

		
============================================================================================================

Readme v0.0.3


The directory test_hwconfig contains a number of hardware config.xml files to show the changes. 
They have been generated using the netx Studio, some of them were edited.
The directory test_hboot contains the output created by hwconfig.py.

Enable/disable pins/signals:
The parameters that configure pins or signals must always be present.
For instance, the custom DPM configuration contains parameters to enable/disable the lines dpm_a11..a14, ALE and WRHN, the 
fixed config "nonmul_intel_sram_be" does not. 
The tool does fully take that into consideration yet, which means that it may accept an input file where those parameters are missing.

On the other hand, parameters to set other options like an SPI mode may be missing, in which case the default settings will be kept.

<config id="...">:
Currently, the parser requires that a config contains an id attribute. I've edited some of the configurations to include a config id.

MMIO:
There are some inconsistencies in the naming of the MMIO signals. The signal names in hardware_config.xml contain some underscores which are not there in the hwconfig tool. Since the names in the HWconfig tool are based on the regdef, could you rename the signals in NETX90_MPW.xml?

NETX90_MPW.xml   hwconfig.py (based on netx90_mmio.h)
xc_sample_0      XC_SAMPLE0 
xc_sample_1      XC_SAMPLE1
xc_trigger_0     XC_TRIGGER0
xc_trigger_1     XC_TRIGGER1

SDRAM:
The fixed (non-custom) configurations don't contain the parameter to enable/disable A12. It should always be present.
The custom config contains a parameter that lets you enable/disable the SD_WEN line. I think that's not possible. The parameter is ignored by the hwconfig tool.

DPM:
The custom config contains parameters to enable the dpm_a11..a14, ale and wrhn lines, the fixed configuration (nonmul_intel_sram_be) doesn't. They should be in all configurations.
However, I don't see that the ALE and WRHN lines are selectable. Currently, the tool does not really do anything with these.

SDPM:
The register values specified for the DPM (hif_io_cfg, dpm_...) must also be present for an SDPM.

SPI: 
Renamed the unit from spi0 to spi0_app and spi2 to spi2_app.
Inserted dummy config ID.
The SPI mode setting is missing. Currently, it's not implemented in the hwconfig tool either.

SQI:
I've renamed the unit from sqi_flash to sqi.
The SPI mode setting is missing. Currently, it's not implemented in the hwconfig tool either.

Biss:
The MO line can be enabled separately.
Currently, both netx Studio and the hwconfig tool don't care and enable all lines at once. Should we make MO selectable?

Endat:
hardware_config.xml contains a  parameter to enable the OE line, however, you can't enable this signal separately.
The parameter is ignored by the hwconfig tool.
Added dummy config ID.

IOlink:
hardware_config.xml contains a parameter to enable the wakeup line. I don't think that's possible. The parameter is ignored by the hwconfig tool. 
Added dummy config ID.

CAN:
renamed to can0_app/can1_app

UART:
renamed uart_xpic to uart_xpic_app.



============================================================================================================

About versioning:
=================

There is a command line option to print the version number:
python hwconfig.py --version.
The tool compares this version with the <tool_version> tag in the
hwconfig.xml file.
If the versions do not match, it rejects the input file and returns an error.

The tool can be used with the current netx Studio by uncommenting 
the following lines in hwconfig.py:
# doc_version_major = 1
# doc_version_minor = 0



============================================================================================================


Creating a new version from Git:
=================================

Clone the latest tagged version

cd into clone directory

Create hwconfig_version.py:
python setversion.py --git <path to git.exe>  <path to HWConfig tool>
e.g.
python setversion.py --git c:\Programme\git\bin\git.exe .
(The --git option can not handle paths with spaces, even when enclosed in 

Create zip archive:
python makezip.py





